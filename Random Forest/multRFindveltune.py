# -*- coding: utf-8 -*-
"""MultivariateRandomForest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r4mZbq9KWqjh6i1x0T-UTD7pF215TINC
"""

from sklearn.ensemble import RandomForestRegressor
import numpy as np
import pandas as pd



filename='/storage/home/d/dzw5320/MachineLearning/Data/indants2.csv'


data=pd.read_csv(filename, sep=',',header=0)
data=data[data['movt']=='yes']

vxmean=data['vx'].mean()
vxstd=data['vx'].std()
vymean=data['vy'].mean()
vystd=data['vy'].std()


trainmov=data[data['t']<=11515]
testmov=data[(data['t']>11515) ]



trainmovvxvy=trainmov.iloc[:, np.r_[5:7]]
testmovvxvy=testmov.iloc[:, np.r_[5:7]]
trainmovvxvy_1=trainmov[['x-1', 'y-1']].values
testmovvxvy_1=testmov[['x-1', 'y-1']].values
trainmovxy_1=trainmov[['x', 'y']].values
testmovxy_1=testmov[['x', 'y']].values



cols_to_norm = [ 
       'vx', 'vy','x-1', 'x-2', 'x-3', 'x-4', 'x-5', 'y-1', 'y-2', 'y-3', 'y-4',
       'y-5', 'vx-1', 'vx-2', 'vx-3', 'vx-4', 'vx-5', 'vy-1', 'vy-2',
       'vy-3', 'vy-4', 'vy-5', 'chamber', 'distind', 'stattime',
       'nwalldist', 'swalldist', 'wwalldist', 'ewalldist',
       'nndist', 'nnxlag1','nnylag1', 'nnvxlag1', 'nnvylag1', 'Q1',
       'Q2', 'Q3', 'Q4','nnmove', 'nnstill','distqueen']
#trainmov[cols_to_norm] = trainmov[cols_to_norm].apply(lambda x: (x - x.min()) / (x.max()-x.min()))
data[cols_to_norm] = data[cols_to_norm].apply(lambda x: (x - x.mean()) / (x.std()))





trainmov=data[data['t']<=11515]
testmov=data[(data['t']>11515) ]



train_in_mov=trainmov.iloc[:, np.r_[9:36,37:trainmov.shape[1]]]
train_in_mov=train_in_mov.values
train_out_mov=trainmov.iloc[:, 5:7]
train_out_mov=train_out_mov.values

test_in_mov=testmov.iloc[:, np.r_[9:36,37:testmov.shape[1]]]
test_in_mov=test_in_mov.values
test_out_mov=testmov.iloc[:, 5:7]
test_out_mov=test_out_mov.values


train_in_mov=train_in_mov.astype(np.float32)
train_out_mov=train_out_mov.astype(np.float32)

test_in_mov=test_in_mov.astype(np.float32)
test_out_mov=test_out_mov.astype(np.float32)



m_depth=np.linspace(2, 50, num=20).astype(int)
m_samples_split=np.linspace(2, 10, num=5).astype(int)
m_samples_leaf=np.linspace(1, 10, num=5).astype(int)
m_depth_series=np.repeat(m_depth, 25)
m_samples_split_series=np.tile(np.repeat(m_samples_split, 5),20)
m_samples_leaf_series=np.tile(m_samples_leaf, 100)
MSPEtrain=np.zeros(500)
MSPEtest=np.zeros(500)
tune=np.column_stack((m_depth_series,m_samples_split_series,m_samples_leaf_series,MSPEtrain,  MSPEtest  ))


for r in range(tune.shape[0]):
	regr = RandomForestRegressor( random_state=0,max_depth=tune[r, 0].astype(int), min_samples_split=tune[r, 1].astype(int), min_samples_leaf=tune[r,2].astype(int),
                              n_estimators=500, n_jobs=-2)

	regr.fit(train_in_mov, train_out_mov)

	test_pred=regr.predict(test_in_mov)

	train_pred=regr.predict(train_in_mov)
	unstdpred_train=train_pred
	unstdpred_test=test_pred
	unstdpred_train[:,0]=(unstdpred_train[:,0]*vxstd)+vxmean
	unstdpred_test[:,0]=(unstdpred_test[:,0]*vxstd)+vxmean
	unstdpred_train[:,1]=(unstdpred_train[:,1]*vystd)+vymean
	unstdpred_test[:,1]=(unstdpred_test[:,1]*vystd)+vymean
	unstdpred_test[:,0]=unstdpred_test[:,0]+testmovvxvy_1[:,0]
	unstdpred_test[:,1]=unstdpred_test[:,1]+testmovvxvy_1[:,1]
	unstdpred_train[:,0]=unstdpred_train[:,0]+trainmovvxvy_1[:,0]
	unstdpred_train[:,1]=unstdpred_train[:,1]+trainmovvxvy_1[:,1]
	tune[r,3]=np.mean(((unstdpred_train[:,0]-trainmovxy_1[:,0])**2+(unstdpred_train[:,1]-trainmovxy_1[:,1])**2)**(0.5))
	tune[r,4]=np.mean(((unstdpred_test[:,0]-testmovxy_1[:,0])**2+(unstdpred_test[:,1]-testmovxy_1[:,1])**2)**(0.5))
	np.save('RFindveltune.npy', tune)




